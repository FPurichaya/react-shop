cache:
  key: ${CI_COMMIT_REF_SLUG}

stages:
  - terraform global plan
  - terraform global apply
  - terraform staging plan
  - terraform staging apply
  - build api
  - build client
  - test
  - deploy api
  - deploy client

terraform global plan:
  stage: terraform global plan
  environment:
    name: staging
  image: 
    name: hashicorp/terraform:0.13.5  
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - terraform --version
    - cd infrastructure
    - chmod +x ./init_remote_backend.sh
    - ./init_remote_backend.sh
    - cd network
    - rm -rf .terraform
    - terraform init
    - terraform validate
    - make lint
  script:
    - terraform plan -out "network-plan"
  artifacts:
    paths:
      - ./infrastructure/network/network-plan

terraform global apply:
  stage: terraform global apply
  environment:
    name: staging
  image: 
    name: hashicorp/terraform:0.13.5  
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - terraform --version
  script:
    - cd infrastructure/network
    - terraform apply -input=false "network-plan"
  when: manual

terraform staging plan:
  stage: terraform staging plan
  environment:
    name: staging
  image: 
    name: hashicorp/terraform:0.13.5  
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - terraform --version
    - cd infrastructure/staging
    - rm -rf .terraform
    - terraform init
    - terraform validate
    - make lint
  script:
    - terraform plan -out "staging-plan"
  artifacts:
    paths:
      - ./infrastructure/staging/staging-plan

terraform staging apply:
  stage: terraform staging apply
  environment:
    name: staging
  image: 
    name: hashicorp/terraform:0.13.5  
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - terraform --version
  script:
    - cd infrastructure/staging
    - terraform apply -input=false "staging-plan"
  when: manual

build api:
  stage: build api
  environment:
    name: staging
  image: docker:19.03
  services:
    - docker:19.03-dind
  before_script:
    - apk add --no-cache python3 py-pip
    - pip install -U pip
    - pip install awscli
  script:
    - $(aws ecr get-login --no-include-email --region eu-west-1)
    - docker build -t $ECR_REGISTRY/$PROJECT_NAME:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA -t $ECR_REGISTRY/$PROJECT_NAME:latest -f api/Dockerfile ./api
    - docker push $ECR_REGISTRY/$PROJECT_NAME
  only:
    - develop

deploy api:
  stage: deploy api
  environment:
    name: staging
  image: python:latest
  before_script:
    - apt-get update
    - pip install -U pip
    - pip install awscli
    - chmod +x ./deploy.sh
  script:
    - ./deploy.sh
  only:
    - develop  

build client:
  stage: build client
  environment: 
    name: staging
  image: node:10-alpine
  script:
    - cd client
    - yarn install
    - yarn build
  artifacts:
    paths:
      - ./client/build
  only:
    - develop

deploy client:
  stage: deploy client
  environment: 
    name: staging
  image: python:latest
  before_script:
    - apt-get update
    - pip install -U pip
    - pip install awscli
  script:
    - cd ./client/build
    - aws s3 sync . s3://$AWS_S3_WEB_BUCKET/
  only:
    - develop

test:
  stage: test
  environment:
    name: staging
  image: docker:19.03
  services:
    - docker:19.03-dind
  before_script:
    - apk add --no-cache python3 py-pip curl docker-compose
    - pip install -U pip
    - pip install awscli
  script:
    - docker-compose up -d mongo mongo_seed
    - HOST="mongo" PORT="27017" docker-compose --no-ansi run --rm wait-for
    - $(aws ecr get-login --no-include-email --region eu-west-1)
    - >-
        IMAGE_TAG=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
        docker-compose up -d api-test
    - HOST="api-test" PORT="2370" docker-compose --no-ansi run --rm wait-for
    - docker-compose up -d web-test
    - HOST="web-test" PORT="80" docker-compose --no-ansi run --rm wait-for
    - docker-compose down -v
    - docker image ls
  only:
    - develop