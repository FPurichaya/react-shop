variables:
  FRONTEND_IMAGE: 'example-web-dep-ap-southeast-1-stage-frontend-ecr'
  BACKENDAPI_IMAGE: 'example-web-dep-ap-southeast-1-stage-backend-ecr'
  IMAGE_TAG: $CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA

stages:
  # - build frontend
  # - deploy frontend
  - build api
  # - test

# build frontend:
#   stage: build frontend
#   image: bentolor/docker-dind-awscli
#   services:
#     - name: docker:dind
#   before_script:
#     - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
#     # - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   script:
#     - cd client
#     # - docker build -t $CI_REGISTRY_USER/$FRONTEND_IMAGE:$IMAGE_TAG --target Yarn .
#     - docker build -t $FRONTEND_IMAGE:$IMAGE_TAG --target Yarn .
#     - docker tag $FRONTEND_IMAGE:$IMAGE_TAG $AWS_ECR_REGISTRY/$FRONTEND_IMAGE:$IMAGE_TAG
#     - docker push $AWS_ECR_REGISTRY/$FRONTEND_IMAGE:$IMAGE_TAG
#     - docker create -it --name frontend-container $AWS_ECR_REGISTRY/$FRONTEND_IMAGE:$IMAGE_TAG bash
#     - docker cp frontend-container:/app/bgshop/build $PWD
#     - docker push $AWS_ECR_REGISTRY/$FRONTEND_IMAGE:$IMAGE_TAG
#   artifacts:
#     paths:
#       - ./client/build

# deploy frontend:
#   stage: deploy frontend
#   image: bentolor/docker-dind-awscli
#   script:
#     - cd client/build
#     - env
#     - aws s3 sync . s3://$AWS_S3_WEBSITE_BUCKET/

build api:
  stage: build api
  image: bentolor/docker-dind-awscli
  services:
    - name: docker:dind
  before_script:
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
  script:
    - cd api
    - docker build -t $BACKENDAPI_IMAGE:$IMAGE_TAG .
    - docker tag $BACKENDAPI_IMAGE:$IMAGE_TAG $AWS_ECR_REGISTRY/$BACKENDAPI_IMAGE:$IMAGE_TAG
    - docker push $AWS_ECR_REGISTRY/$BACKENDAPI_IMAGE:$IMAGE_TAG
# test:
#   stage: test
#   image: bentolor/docker-dind-awscli
#   services:
#     - name: docker:dind
#   before_script:
#     - docker info
#     - apk update
#     - apk upgrade
#     - apk add py-pip python3-dev libffi-dev openssl-dev gcc libc-dev rust cargo make sudo curl
#     - sudo curl -L "https://github.com/docker/compose/releases/download/1.28.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#     - sudo chmod +x /usr/local/bin/docker-compose
#     - sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
#     - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
#   script:
#     # - docker network create -d bridge some-network
#     - docker-compose up -d mongo mongo_seed
#     - HOST="mongo" PORT="27017" docker-compose --no-ansi run --rm wait-for
#     # - docker run -d --network some-network --name some-mongo -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret -p 27017:27017 mongo
#     # - sleep 20
#     # - docker run -d --network some-network --name api-backend-container -e MONGO_USER=mongoadmin -e MONGO_PASS=secret -e MONGO_CONN_STRING=some-mongo:27017/shop?authSource=admin -p 2370:2370 $AWS_ECR_REGISTRY/$BACKENDAPI_IMAGE:$IMAGE_TAG
#     - docker-compose pull api
#     - docker-compose run -d --rm --name api api
#     - HOST="api" PORT="2370" docker-compose --no-ansi run --rm wait-for
#     - docker ps
#     - docker logs mongo
#     - docker logs api
